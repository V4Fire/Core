{
  "parser": "@typescript-eslint/parser",

  "parserOptions": {
    "project": "tsconfig.json",
    "tsconfigRootDir": ".",
    "sourceType": "module"
  },

  "env": {
    "browser": true,
    "es6": true,
    "es2017": true
  },

  "plugins": ["@typescript-eslint"],

  "rules": {
    "strict": "error",

    "getter-return": ["error", {"allowImplicit": false}],
    "no-setter-return": "error",
    "accessor-pairs": ["error", {
      "setWithoutGet": true,
      "getWithoutSet": false,
      "enforceForClassMembers": false
    }],

    "no-async-promise-executor": "off",
    "no-await-in-loop": "off",
    "require-atomic-updates": "warn",

    "no-compare-neg-zero": "error",
    "no-loss-of-precision": "warn",
    "no-implicit-coercion": "error",

    "no-cond-assign": ["error", "except-parens"],
    "no-return-assign": "off",
    "no-ex-assign": "error",
    "no-func-assign": "error",
    "no-import-assign": "error",
    "no-param-reassign": "off",

    "no-self-assign": "error",
    "no-self-compare": "error",

    "no-unexpected-multiline": "error",
    "semi-spacing": "error",

    "no-extra-bind": "error",
    "no-labels": ["error", {"allowLoop": true}],
    "no-label-var": "error",
    "no-extra-label": "error",
    "no-unused-labels": "error",

    "no-extra-boolean-cast": "error",
    "no-constant-condition": "warn",
    "yoda": "error",

    "no-lonely-if": "warn",
    "no-dupe-else-if": "warn",
    "no-duplicate-case": "error",
    "no-dupe-keys": "error",
    "no-dupe-args": "error",
    "no-else-return": ["error", {"allowElseIf": false}],
    "no-useless-return": "error",
    "no-lone-blocks": "error",

    "no-fallthrough": "error",
    "default-case": "warn",
    "default-case-last": "error",
    "no-useless-catch": "error",
    "no-case-declarations": "error",

    "no-control-regex": "warn",
    "no-div-regex": "off",
    "no-invalid-regexp": "error",
    "no-regex-spaces": "warn",
    "no-empty-character-class": "error",
    "no-misleading-character-class": "warn",
    "no-irregular-whitespace": ["error", {"skipStrings": true, "skipTemplates": true}],
    "require-unicode-regexp": "error",
    "prefer-regex-literals": "error",
    "prefer-named-capture-group": "off",

    "no-sparse-arrays": "error",
    "array-callback-return": "error",

    "no-obj-calls": "error",
    "no-sequences": "error",

    "for-direction": "off",
    "guard-for-in": "warn",

    "no-prototype-builtins": "off",
    "no-loop-func": "error",
    "no-unmodified-loop-condition": "error",

    "no-extend-native": "off",
    "no-global-assign": "error",
    "no-implicit-globals": "error",
    "no-undef": ["error", {"typeof": true}],

    "no-redeclare": "error",
    "no-shadow": "off",
    "no-shadow-restricted-names": "error",

    "no-restricted-globals": [
      "error",

      {
        "name": "window",
        "message": "Use globalThis parameter instead."
      },

      {
        "name": "global",
        "message": "Use globalThis parameter instead."
      }
    ],

    "no-multi-str": "error",
    "no-template-curly-in-string": "warn",
    "no-octal-escape": "error",
    "curly": "error",

    "no-empty": "warn",
    "no-empty-pattern": "error",

    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-useless-call": "error",

    "no-warning-comments": "off",
    "capitalized-comments": ["error", "always", {
      "ignorePattern": "#",
      "ignoreConsecutiveComments": true
    }],

    "no-unreachable": "warn",
    "no-useless-concat": "error",
    "no-useless-backreference": "error",
    "no-useless-escape": "error",

    "vars-on-top": "error",
    "block-scoped-var": "error",
    "no-inner-declarations": "error",

    "class-methods-use-this": "off",
    "no-constructor-return": "off",
    "consistent-return": "off",

    "no-iterator": "warn",
    "no-proto": "off",

    "no-caller": "error",
    "no-with": "error",
    "no-delete-var": "error",

    "no-undef-init": "off",
    "no-use-before-define": ["error", {"functions": false}],

    "no-void": ["error", {"allowAsStatement": true}],
    "no-eval": "error",
    "no-script-url": "off",

    "no-eq-null": "off",
    "eqeqeq": ["error", "always", {"null": "never"}],

    "use-isnan": "error",
    "valid-typeof": "error",

    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "prefer-promise-reject-errors": "error",

    "no-console": "off",
    "no-alert": "warn",
    "no-debugger": "warn",

    "dot-location": ["error", "property"],

    "no-octal": "error",
    "no-floating-decimal": "error",
    "radix": "error",

    "camelcase": "error",

    "comma-dangle": "error",
    "comma-style": "error",

    "eol-last": "error",

    "no-multi-spaces": "error",
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "key-spacing": "error",
    "computed-property-spacing": "error",
    "space-in-parens": "error",

    "array-bracket-newline": "error",
    "array-bracket-spacing": "error",
    "array-element-newline": ["error", {"multiline": true}],

    "object-curly-spacing": "error",
    "block-spacing": "error",

    "func-name-matching": "error",
    "func-names": ["error", "as-needed"],
    "func-style": ["error", "declaration", {"allowArrowFunctions": true}],
    "function-call-argument-newline": ["error", "consistent"],
    "function-paren-newline": "error",
    "wrap-iife": "error",

    "arrow-parens": "error",
    "arrow-spacing": "error",
    "arrow-body-style": "error",
    "implicit-arrow-linebreak": "error",

    "complexity": ["error", {"max": 50}],

    "max-params": ["warn", {"max": 3}],
    "max-statements": "off",

    "max-classes-per-file": ["warn", 3],

    "max-depth": ["warn", {"max": 5}],
    "max-nested-callbacks": ["warn", {"max": 5}],

    "max-lines-per-function": ["warn", {
      "max": 400,
      "skipComments": true
    }],

    "max-lines": ["error", {
      "max": 800,
      "skipComments": true
    }],

    "max-len": ["error", {
      "code": 120,
      "tabWidth": 2,
      "ignoreUrls": true,
      "ignoreRegExpLiterals": true
    }],

    // [TSLint]

    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-invalid-void-type": "error",
    "@typescript-eslint/no-type-alias": "off",

    "@typescript-eslint/no-unnecessary-type-arguments": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",

    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
    "@typescript-eslint/no-extra-non-null-assertion": "error",

    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/prefer-nullish-coalescing": "warn",

    "@typescript-eslint/no-inferrable-types": ["error", {
      "ignoreParameters": true,
      "ignoreProperties": true
    }],

    "@typescript-eslint/array-type": ["error", {"array-simple": true}],
    "@typescript-eslint/consistent-type-assertions": ["error", {
      "assertionStyle": "angle-bracket",
      "objectLiteralTypeAssertions": "allow"
    }],

    "@typescript-eslint/empty-interface": "off",
    "@typescript-eslint/method-signature-style": ["error", "method"],
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/member-delimiter-style": "error",

    "@typescript-eslint/prefer-function-type": "off",
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/unified-signatures": "warn",

    "@typescript-eslint/typedef": ["error", {
      "parameter": true,
      "arrowParameter": false,
      "propertyDeclaration": true,
      "memberVariableDeclaration": true,
      "variableDeclaration": false,
      "variableDeclarationIgnoreFunction": true,
      "arrayDestructuring": false,
      "objectDestructuring": false
    }],

    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": ["error", {
      "allowArgumentsExplicitlyTypedAsAny": true,
      "allowHigherOrderFunctions": true
    }],

    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/class-literal-property-style": "off",
    "@typescript-eslint/no-extraneous-class": "error",
    "@typescript-eslint/no-parameter-properties": "error",
    "@typescript-eslint/unbound-method": ["error", {
      "ignoreStatic": true
    }],

    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/prefer-readonly-parameter-types": "off",

    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "@typescript-eslint/no-require-imports": "off",
    "@typescript-eslint/no-var-requires": "error",

    "@typescript-eslint/prefer-as-const": "error",
    "@typescript-eslint/prefer-for-of": "off",
    "@typescript-eslint/no-for-in-array": "off",

    "@typescript-eslint/prefer-includes": "warn",
    "@typescript-eslint/require-array-sort-compare": "warn",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    "@typescript-eslint/prefer-reduce-type-parameter": "warn",
    "@typescript-eslint/prefer-regexp-exec": "warn",

    "@typescript-eslint/no-base-to-string": "error",
    "@typescript-eslint/no-dynamic-delete": "warn",
    "@typescript-eslint/no-implied-eval": "off",

    "@typescript-eslint/restrict-plus-operands": "error",
    "@typescript-eslint/restrict-template-expressions": ["error", {
      "allowNumber": true,
      "allowBoolean": true,
      "allowNullish": true,
      "allowAny": true
    }],

    "@typescript-eslint/switch-exhaustiveness-check": "warn",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
    "@typescript-eslint/strict-boolean-expressions": ["error", {
      "allowString": false,
      "allowNumber": false,
      "allowNullableBoolean": true
    }],

    "@typescript-eslint/no-floating-promises": ["warn", {"ignoreIIFE": true}],
    "@typescript-eslint/promise-function-async": "off",

    "@typescript-eslint/no-unnecessary-condition": ["error", {
      "allowConstantLoopConditions": true
    }],

    "@typescript-eslint/no-throw-literal": "error",
    "@typescript-eslint/no-this-alias": ["error", {
      "allowDestructuring": true,
      "allowedNames": ["self", "that"]
    }],

    "@typescript-eslint/ban-ts-comment": ["error", {
      "ts-ignore": "allow-with-description",
      "ts-expect-error": "allow-with-description",
      "minimumDescriptionLength": 4
    }],

    "@typescript-eslint/prefer-ts-expect-error": "off",
    "@typescript-eslint/ban-types": ["error", {
      "extendDefaults": false,
      "types": {
        "String": {
          "message": "Use string instead",
          "fixWith": "string"
        },

        "Number": {
          "message": "Use number instead",
          "fixWith": "number"
        },

        "Boolean": {
          "message": "Use boolean instead",
          "fixWith": "boolean"
        },

        "Symbol": {
          "message": "Use symbol instead",
          "fixWith": "symbol"
        },

        "{}": {
          "message": "Use object instead",
          "fixWith": "object"
        }
      }
    }],

    // [TSLint & ESLint]

    "brace-style": "off",
    "@typescript-eslint/brace-style": ["error"],

    "comma-spacing": "off",
    "@typescript-eslint/comma-spacing": ["error"],

    "default-param-last": "off",
    "@typescript-eslint/default-param-last": ["error"],

    "dot-notation": "off",
    "@typescript-eslint/dot-notation": ["error"],

    "func-call-spacing": "off",
    "@typescript-eslint/func-call-spacing": ["error"],

    "init-declarations": "off",
    "@typescript-eslint/init-declarations": "off",

    "keyword-spacing": "off",
    "@typescript-eslint/keyword-spacing": ["error"],

    // note you must disable the base rule as it can report incorrect errors
    "lines-between-class-members": "off",
    "@typescript-eslint/lines-between-class-members": ["error", {"exceptAfterSingleLine": true}],

    "no-array-constructor": "off",
    "@typescript-eslint/no-array-constructor": ["error"],

    // note you must disable the base rule as it can report incorrect errors
    "no-dupe-class-members": "off",
    "@typescript-eslint/no-dupe-class-members": ["error"],

    // note you must disable the base rule as it can report incorrect errors
    "no-empty-function": "off",
    "@typescript-eslint/no-empty-function": ["error"],

    "no-extra-parens": "off",
    "@typescript-eslint/no-extra-parens": ["error", "all", {
      "conditionalAssign": true,
      "nestedBinaryExpressions": true,
      "ignoreJSX": "all",
      "enforceForSequenceExpressions": true,
      "enforceForNewInMemberExpressions": true
    }],

    "semi": "off",
    "@typescript-eslint/semi": ["error"],

    "no-extra-semi": "off",
    "@typescript-eslint/no-extra-semi": ["error"],

    "no-invalid-this": "off",
    "@typescript-eslint/no-invalid-this": ["error"],

    "no-magic-numbers": "off",
    "@typescript-eslint/no-magic-numbers": ["error", {
      "enforceConst": true,
      "ignore": [
        0.1, 0.2, 0.3, 0.5, 0.7,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        16, 32, 64, 128, 256, 512, 1024,
        200, 300, 400, 401, 402, 403, 404, 500, 501, 502, 503
      ],
      "ignoreArrayIndexes": true,
      "ignoreEnums": true,
      "ignoreNumericLiteralTypes": true,
      "ignoreReadonlyClassProperties": true
    }],

    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": ["error", {"allowShortCircuit": true}],

    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars-experimental": ["error", {
      "ignoreArgsIfArgsAfterAreUsed": true
    }],

    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": ["error"],

    "quotes": "off",
    "@typescript-eslint/quotes": ["error", "single", {"avoidEscape":  true}],

    "require-await": "off",
    "@typescript-eslint/require-await": "error",

    "no-return-await": "off",
    "@typescript-eslint/return-await": ["error", "in-try-catch"],

    "space-before-function-paren": "off",
    "@typescript-eslint/space-before-function-paren": ["error", {
      "anonymous": "always",
      "named": "never",
      "asyncArrow": "always"
    }]
  }
}
